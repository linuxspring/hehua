<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context-3.1.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                http://www.springframework.org/schema/mvc
                http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">


	<!-- 注解扫描包 -->
	<context:component-scan base-package="net.plugins.*" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<mvc:annotation-driven/>
	<mvc:default-servlet-handler/>

	<!-- aop @Aspect 下面已经开启自动注册，也就是在bean添加@Aspect就可以啦，不需要写，不然会拦截两次的
  	<bean id="logService2" class="com.wssys.framework.LoggerAspectBean"></bean>
-->
	<!-- 启动对@AspectJ注解的支持  -->

	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 开启AOP注解配置,proxy-target-class=true表示强制采用CGLIB技术生成代理类
	<aop:aspectj-autoproxy proxy-target-class="true"/> -->

	<!-- 开启注解
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="com.share.util.UTF8StringHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	-->
	<!--<mvc:interceptors>-->
		<!--<mvc:interceptor>-->
			<!--<mvc:mapping path="/*/*" />-->
			<!--<bean class="com.wssys.framework.SessionTimeoutInterceptor" >-->
				<!--<property name="allowUrls">-->
					<!--<list>-->
						<!--<value>/*/*.shtml</value>-->
						<!--<value>/*/*.shtm</value>-->
					<!--</list>-->
				<!--</property>-->
			<!--</bean>-->
		<!--</mvc:interceptor>-->
	<!--</mvc:interceptors>-->

	<!-- exception handler 统一异常处理-->
	<bean id="handlerExceptionResolver"
		  class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" >
		<property name="exceptionMappings">
			<props>
				<prop key="*.CustomeException">redirect:/sessiontimeout.do</prop>
			</props>
		</property>
	</bean>

	<!-- 静态资源(js/image)的访问 -->
	<mvc:resources location="/ref/" mapping="/ref/**"/>

	<!-- 定义视图解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!--<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>-->

	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"/>
		<!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="10485760000"/>
		<property name="maxInMemorySize" value="40960"></property>
		<!--  <property name="uploadTempDir" value="D:\\upload\\"></property>
          <property name="maxUploadSize" value="10240000"/>-->
	</bean>


	<!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
			</props>
		</property>
	</bean>

	<aop:config proxy-target-class="true"></aop:config>

	<!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
		<!--<property name="securityManager" ref="securityManager"/>-->
	<!--</bean>-->


</beans>
